//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/DuckHunt/TestControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestControlls"",
    ""maps"": [
        {
            ""name"": ""FirstPerson"",
            ""id"": ""740fe88d-24d2-459a-b509-dc1ec86df58a"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""9fbab8a6-9ad9-4469-ba47-adb28b37e59a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""62f15c85-4fed-4520-8d51-2f5020524e36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""30ef4017-df04-44c0-bae3-5e59d5a50ce8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""82716567-f437-40d1-83de-b0e1fa2bbc54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""d81247ff-4ca2-4d54-a5c2-9c8330cb8b84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f6335339-faa9-40b1-a8dd-fe7165de9e8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ee97319-f318-4e0e-828a-7fc13bb505ae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7781200f-1b12-4a9b-a6eb-b98c9867c6dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4910d71-755d-4b92-b600-fde39844961c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8107a32d-d373-4593-a5a1-2679609e6fa3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ae40eaa-653f-4ee3-8c8a-9a9a22e5caca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5778a0ed-4691-4f16-8aa1-174b52118be9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FirstPerson
        m_FirstPerson = asset.FindActionMap("FirstPerson", throwIfNotFound: true);
        m_FirstPerson_Forward = m_FirstPerson.FindAction("Forward", throwIfNotFound: true);
        m_FirstPerson_Backward = m_FirstPerson.FindAction("Backward", throwIfNotFound: true);
        m_FirstPerson_Look = m_FirstPerson.FindAction("Look", throwIfNotFound: true);
        m_FirstPerson_Shoot = m_FirstPerson.FindAction("Shoot", throwIfNotFound: true);
        m_FirstPerson_Right = m_FirstPerson.FindAction("Right", throwIfNotFound: true);
        m_FirstPerson_Left = m_FirstPerson.FindAction("Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPerson
    private readonly InputActionMap m_FirstPerson;
    private IFirstPersonActions m_FirstPersonActionsCallbackInterface;
    private readonly InputAction m_FirstPerson_Forward;
    private readonly InputAction m_FirstPerson_Backward;
    private readonly InputAction m_FirstPerson_Look;
    private readonly InputAction m_FirstPerson_Shoot;
    private readonly InputAction m_FirstPerson_Right;
    private readonly InputAction m_FirstPerson_Left;
    public struct FirstPersonActions
    {
        private @TestControlls m_Wrapper;
        public FirstPersonActions(@TestControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_FirstPerson_Forward;
        public InputAction @Backward => m_Wrapper.m_FirstPerson_Backward;
        public InputAction @Look => m_Wrapper.m_FirstPerson_Look;
        public InputAction @Shoot => m_Wrapper.m_FirstPerson_Shoot;
        public InputAction @Right => m_Wrapper.m_FirstPerson_Right;
        public InputAction @Left => m_Wrapper.m_FirstPerson_Left;
        public InputActionMap Get() { return m_Wrapper.m_FirstPerson; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPersonActions instance)
        {
            if (m_Wrapper.m_FirstPersonActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnBackward;
                @Look.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLook;
                @Shoot.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnShoot;
                @Right.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FirstPersonActionsCallbackInterface.OnLeft;
            }
            m_Wrapper.m_FirstPersonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
            }
        }
    }
    public FirstPersonActions @FirstPerson => new FirstPersonActions(this);
    public interface IFirstPersonActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
}
